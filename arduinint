#!/bin/python3
import argparse
import json
import os
import shutil
import subprocess

ARDUINO_CODE_HEADER = './interpreter/include/int_arduino_code.h'
ARDUINO_CODE_SOURCE = './interpreter/src/int_arduino_code.c'

COMPILE_MKHDR_CMD = ['make', '-C', './subprojects/makeheaders']
MKHDR_CMD = ['./subprojects/makeheaders/makeheaders', '-h', ARDUINO_CODE_SOURCE]

INTERN_ERROR_MSG = 'Internal error. Try to redownload the project'

BOARD = ['uno']

def handle_cmd_fail(status, msg=''):
    if status.returncode == 0:
        return

    if msg:
        print(msg)
    if status.stdout:
        print(status.stdout)
    if status.stderr:
        print(status.stderr)
    exit(1)

def pre_interpreter(ino_path, test=False):
    # Check the validity of .ino path
    if not is_path_correct(ino_path, 'ino') and not test:
        print("Unable to find your .ino file")
        exit(1)

    # Compile makeheaders.
    status = subprocess.run(COMPILE_MKHDR_CMD, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    handle_cmd_fail(status, 'Unable to compile makeheaders')

    # Copy .ino code into the interpreter directory.
    try:
        shutil.copyfile(ino_path, ARDUINO_CODE_SOURCE)
    except IOError:
        print('Unable to find your arduino code.')
        exit(1)

    # Include function prototype header.
    with open(ARDUINO_CODE_SOURCE, 'r+') as f:
        lines = f.readlines()
        lines.insert(0, '#include "int_arduino_code.h"\n')
        f.seek(0)
        f.writelines(lines)

    # Create the header for the .ino file.
    # Copy the model into the right file.
    try:
        shutil.copyfile('./interpreter/include/int_arduino_code_model.h',
                        ARDUINO_CODE_HEADER)
    except IOError:
        print(INTERN_ERROR_MSG)
        exit(1)

    # Create function prototype.
    status = subprocess.run(MKHDR_CMD, stdout=subprocess.PIPE)
    handle_cmd_fail(status, 'Unable to generate function prototype for your .ino')
    auto_gen_prototype = status.stdout.decode('utf-8')

    # Generate final header file.
    with open(ARDUINO_CODE_HEADER, 'r+') as f:
        header = f.read()
        header = header.replace('@@', auto_gen_prototype)
        f.seek(0)
        f.write(header)

def compile_interpreter(board):
    # FIXME: Meson build system can't change the CFLAGS on the fly
    # so we need to reconfigure and recompile everything.
    if os.path.exists('./build'):
        shutil.rmtree('./build')
    os.makedirs('./build')

    cflags = 'CFLAGS=-DBOARD_{}'.format(board.upper())
    status = subprocess.run('{} meson ./build'.format(cflags), shell=True, stdout=subprocess.DEVNULL)
    handle_cmd_fail(status, 'Unable to initialize project build')

    status = subprocess.run("ninja -C ./build", shell=True, stdout=subprocess.DEVNULL)
    handle_cmd_fail(status, 'Unable to compile the project')

def generate_interpreter_arguments(config):
    cmd_arg = []
    if 'running_time' in config:
        cmd_arg.append('-r {}'.format(config['running_time']))
    if 'increment_time' in config:
        cmd_arg.append('-i {}'.format(config['increment_time']))
    if 'io_events' in config:
        for event in config['io_events']:
            cmd_arg.append('-e {}:{}:{}'.format(event['time'], event['pin'], event['value']))

    return cmd_arg


def run_interpreter(config):
    status = subprocess.run(['./build/interpreter/src/interpreter'] +
                            generate_interpreter_arguments(config),
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if status.returncode != 0:
        print(status.stderr.decode('utf-8'))
    print(status.stdout.decode('utf-8'))

def run_test():
    status = subprocess.run("ninja -C ./build test", shell=True)
    if status.returncode != 0:
        with open('./build/meson-logs/testlog.txt', 'r') as f:
            print(f.read())

    print()
    status = subprocess.run('ninja -C ./build test-valgrind', shell=True)
    if status.returncode != 0:
        with open('./build/meson-logs/testlog-valgrind.txt', 'r') as f:
            print(f.read())



def parse_config_file(config_file):
    if not is_path_correct(config_file, 'json'):
        print('Unable to find your config file')
        exit(1)

    config = {}
    with open(config_file) as f:
        config = json.loads(f.read())
    if 'board' not in config:
        print('Unable to find the board.')
        exit(1)
    if config['board'] not in BOARD:
        print('Unable to find {} board.'.format(config['board']))
        exit(1)
    return config

def is_path_correct(path, extension):
    return os.path.exists(path) and os.path.splitext(path)[1] == '.{}'.format(extension)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='action')

    parser_ex = subparsers.add_parser('interpret', help='the given arduino file')
    parser_ex.add_argument('arduino_code', help='arduino file that will be interpreted')
    parser_ex.add_argument('-c', '--config', help='json config file', required=True)

    parser_test = subparsers.add_parser('test', help='run test')

    args = parser.parse_args()

    # Get absolute path given by the user.
    if args.action == 'interpret':
        config_path = os.path.abspath(args.config)
        code_path = os.path.abspath(args.arduino_code)

    # Change the working directory to the project directory.
    project_dir = os.path.dirname(os.path.abspath(__file__))
    os.chdir(project_dir)

    config = {}
    if args.action == 'interpret':
        config = parse_config_file(config_path)
        pre_interpreter(code_path)
    elif args.action == 'test':
        config['board'] = 'uno'
        pre_interpreter('./interpreter/src/int_arduino_code_model.c', test=True)

    compile_interpreter(config['board'])

    if args.action == 'interpret':
        run_interpreter(config)
    elif args.action == 'test':
        run_test()
